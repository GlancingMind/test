/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.eclipse.xtext.scoping.IScope
import org.xtext.example.mydsl.myDsl.NodeInstanceReference
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.myDsl.SystemReference

class MyDslScopeProvider extends AbstractMyDslScopeProvider {

	override getScope(EObject context, EReference reference) {
		switch(context) {
			NodeInstanceReference case reference == MyDslPackage::Literals::NODE_INSTANCE_REFERENCE__NODE: {
				getScopeForNodeInstanceReferenceNode(context, reference)
			}
			SystemReference case reference == MyDslPackage::Literals::SYSTEM_REFERENCE__SUBSYSTEM: {
				getScopeForSystemReferenceSubSystem(context, reference)
			}
			default:
				super.getScope(context, reference)
		}
	}
	
	private def IScope getScopeForNodeInstanceReferenceNode(NodeInstanceReference nodeRef, EReference reference) {
		val candidates = nodeRef.belongingSystem.system.type.nodes
		return Scopes::scopeFor(candidates)
	}
	
	private def IScope getScopeForSystemReferenceSubSystem(SystemReference sysRef, EReference reference) {
		val candidates = sysRef.system.type.subsystems
		return Scopes::scopeFor(candidates)
	}
}