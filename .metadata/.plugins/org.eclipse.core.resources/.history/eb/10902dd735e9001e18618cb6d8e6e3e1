grammar org.xtext.fetaml.Fetaml hidden(WS, COMMENT)

generate fetaml "http://www.xtext.org/fetaml/Fetaml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	(nodes+=NodeDefinition
	| systems+=SystemDefinition
	| messages+=MessageDefinition
	| deployments+=DeploymentDefinition
	| services+=ServiceDefinition
	| platforms+=PlatformDefinition
	| devices+=DeviceDefinition
	| packages+=PackageDefinition
	| statemachines+=StateMachineDefinition
	| states+=StateDefinition
	| hierarchicalStates+=HierarchicalStateDefinition)*;

QN:
	ID
;

FQN:
	QN '.' QN
;

Filepath:
	path=STRING
;

Glob:
	exp=STRING
;

fragment UserGivenIdentifier:
	name=QN
;

fragment DefinitionName<belongsToSomePackage>:
	UserGivenIdentifier (<belongsToSomePackage> 'in' package=[PackageDefinition])
;

PackageDefinition:
	(skipGeneration?='abstract')? language=PackageLanguage 'package' DefinitionName<false> ':' (
		'version' ':' 			(version+=STRING ';')*
		| 'description' ':' 	(description+=STRING ';')*
		| 'maintainers' ':' 	(maintainers+=Maintainer ';')*
		| 'license' 'name' ':' 	(licenses+=STRING ';')*
		| 'properties' ':' 		(properties+=PackageProperty ';')*
	)* 'end' endName=QN ';'
;

enum PackageLanguage:
	cpp | python
;

PackageProperty:
	generateUnusedDefinitions?='GenerateUnusedDefinitions'
	| DeleteUnusedUserCode?='DeleteUnusedUserCode'
	| PreserveFileContentProperty
	| UserCodeOutputDirectoryProperty
	| Property
;

UserCodeOutputDirectoryProperty:
	'UserCodeOutputDirectory' directory=Filepath
;

PreserveFileContentProperty:
	'preserve' 'content' 'of' glob=Glob
;

Property:
	key=QN value=QN
;

Maintainer:
	name=STRING ':' mail=STRING
;

// Note: Comments aren't allowed between documentation lines for clarity.
Description hidden(WS):
	lines+=DOC_LINE+
;

/***************************************************************************************************************************
 * Deployment
 **************************************************************************************************************************/
DeploymentDefinition:
	(description=Description)? 'deployment' DefinitionName<true> ':' (
		'systems' ':' 				(systems+=SystemInstance ';')*
		| 'platforms' ':' 			(platforms+=PlatformInstance ';')*
		| 'processes' ':' 			(processes+=ProcessInstance ';')*
		| 'process' 'mappings' ':' 	(processMappings+=ProcessMapping ';')*
		| 'function' 'mappings' ':' (functionMappings+=FunctionMapping ';')*
		| 'properties' ':' 			(properties+=Property ';')*
	)* 'end' endName=QN ';'
;

PlatformInstance:
	type=[PlatformDefinition|FQN] UserGivenIdentifier
;

ProcessInstance:
	UserGivenIdentifier 'runs' nodes+=SystemNodeReference (',' nodes+=SystemNodeReference)*
;

ProcessMapping:
	process=[ProcessInstance] '->' platform=[PlatformInstance]
;

SystemNodeInstanceFQN:
	QN ('.' QN)*
;

// TODO rename to SystemNodeInstanceReference
// TODO try to get rid of fromSystem and only use instance=[NodeInstance|SystemNodeInstanceFQN]
// This might be challenging, as fromSystem is used within the UnusedDefinition provider etc.
// The scopeProvider could handle this easily, just use ECoreUtils to get the DeploymentDefiniton container
// of the SystemNodeInstance and then iterate over all system instances and ask for the respective node instances.
SystemNodeReference:
	fromSystem=[SystemInstance] '.' instance=[NodeInstance]
;

FunctionMapping:
	node=SystemNodeReference '.' nodeFunction=[Function] '-'  device=PlatformDeviceReference '.' deviceFunction=[Function]
;

PlatformDeviceReference:
	fromPlatform=[PlatformInstance] '.' instance=[DeviceInstance]
;

/***************************************************************************************************************************
 * System
 **************************************************************************************************************************/
SystemDefinition:
	(description=Description)? 'system' DefinitionName<true> ':' (
			'node' 'instances' ':' 	(nodeInstances+=NodeInstance ';')*
		| 	'subsystems' ':' 		(subsystems+=SystemInstance ';')*
		| 	'data' 'ports' ':' 		(dataPorts+=DataPort ';')*
		| 	'service' 'ports' ':' 	(servicePorts+=ServicePort ';')*
		| 	'connects' ':' 			(connections+=DirectConnection ';')*
		| 	'forwards' ':' 			(forwardings+=ForwardConnection ';')*
		| 	'properties' ':' 		(properties+=Property ';')*
	)* 'end' endName=QN ';'
;

NodeInstance:
	type=[NodeDefinition|FQN] UserGivenIdentifier
;

SystemInstance:
	type=[SystemDefinition|FQN] UserGivenIdentifier
;

fragment Connection:
	port1=PortReference  '-' port2=PortReference
;

PortReference:
	(provider=[PortProvider] isPortFromSomeProvider?='.')?  port=[Port]
;

PortProvider:
	SystemInstance | NodeInstance
;

ForwardConnection: Connection;
DirectConnection:  Connection;

Port:
	DataPort | ServicePort
;

DataPort:
	Publisher | Subscriber
;

ServicePort:
	ServiceProvider | ServiceConsumer
;

Publisher:
	(description=Description)?
	'out' type=[MessageDefinition|FQN] UserGivenIdentifier 
;

Subscriber:
	(description=Description)?
	'in' type=[MessageDefinition|FQN] UserGivenIdentifier 
;

ServiceProvider:
	(description=Description)?
	'provides' type=[ServiceDefinition|FQN] UserGivenIdentifier 
;

ServiceConsumer:
	(description=Description)?
	'requires' type=[ServiceDefinition|FQN] UserGivenIdentifier 
;

/***************************************************************************************************************************
 * Node
 **************************************************************************************************************************/
NodeDefinition:
	(description=Description)? 'node' DefinitionName<true> ('extends' extended=NodeList)? ':' (
	 		'properties' ':' 		(properties+=Property ';')*
		| 	'variables' ':' 		(variables+=Variable ';')*
		| 	'parameter' ':' 		(parameters+=Variable ';')*
		| 	'data' 'ports' ':' 		(dataPorts+=DataPort ';')*
		| 	'service' 'ports' ':' 	(servicePorts+=ServicePort ';')*
		| 	'functions' ':' 		(functions+=CallbackDefinition ';')*
		|	'statemachines' ':'		(statemachines+=[StateMachineDefinition|FQN] ';')*
	)* 'end' endName=QN ';'
;

NodeList:
	nodes+=[NodeDefinition|FQN] (',' nodes+=[NodeDefinition|FQN])*
;

Variable:
	 dataType=DataType UserGivenIdentifier
;

fragment Function:
	(description=Description)?
	(returnsNothing?='void' | returnType=DataType) UserGivenIdentifier '(' (parameters+=Variable (',' parameters+=Variable)*)? ')'
;

FunctionDefinition:
	Function
;

CallbackDefinition:
	Function
;

/***************************************************************************************************************************
 * Communication
 **************************************************************************************************************************/
MessageDefinition:
	(description=Description)? 'message' DefinitionName<true> ':' (
			'components' ':' (components+=Component ';')*
		| 	'properties' ':' (properties+=Property ';')*
	)* 'end' endName=QN ';'
;

ServiceDefinition:
	(description=Description)? 'service' DefinitionName<true> ':' (
			'request' 'components' ':' 	(requests+=Component ';')*
		| 	'response' 'components' ':' (responses+=Component ';')*
		| 	'properties' ':' 			(properties+=Property ';')*
	)* 'end' endName=QN ';'
;

Component:
	(description=Description)?
	dataType=DataType UserGivenIdentifier
;

/***************************************************************************************************************************
 * type handling
 **************************************************************************************************************************/
DataType:
	{Int8} name='Int8' |
	{Int16} name='Int16' |
	{Int32} name='Int32' |
	{UInt8} name='UInt8' |
	{UInt16} name='UInt16' |
	{UInt32} name='UInt32' |
	{Char} name='Char' |
	{Byte} name='Byte' |
	{Double} name='Double' |
	{Bool} name='Bool' |
	referencedDefinition=[DerivedType|FQN]
;

DerivedType:
	MessageDefinition | NodeDefinition
;


/***************************************************************************************************************************
 * Platform
 **************************************************************************************************************************/

PlatformDefinition:
	(description=Description)? 'platform' DefinitionName<true> ':' (		
			'os' ':' 			(operatingSystems+=OperatingSystem ';')*
		|	'buses' ':'			(buses+=BusInstance ';')*
		|	'devices' ':' 		(devices+=DeviceInstance ';')*
		|	'properties' ':'	(properties+=Property ';')*
	)* 'end' endName=QN ';'
;

BusInstance:
	type=QN UserGivenIdentifier
;

DeviceInstance:
	type=[DeviceDefinition|FQN] UserGivenIdentifier (busDefined?='uses' bus=[BusInstance])? 
;

OperatingSystem:
	UserGivenIdentifier
;

/***************************************************************************************************************************
 * Device
 **************************************************************************************************************************/

DeviceDefinition:
	(description=Description)? 'device' DefinitionName<true> ':' (		
			'from' ':' 			(deviceCalledFunctions+=CallbackDefinition ';')*
		|	'to' ':'			(userCalledFunctions+=FunctionDefinition ';')*
		|	'properties' ':'	(properties+=Property ';')*
	)* 'end' endName=QN ';'
;

/***************************************************************************************************************************
 * State Machine
 **************************************************************************************************************************/
StateMachineDefinition:
	(description=Description)? 'statemachine' DefinitionName<true> ':' (		
		'events' ':' 		(events+=Event ';')*
		| 'guards' ':' 		(guards+=Guard ';')*
		| 'transitions' ':'	(transitions+=Transition ';')*
		| 'properties' ':' 	(properties+=Property ';')*
	)* 'end' endName=QN ';'
;

StateDefinition:
	(description=Description)? 'state' DefinitionName<true> ':' (
		'enter' ':' 		(onEnter+=ActionDefinition ';')*
		| 'always' ':' 		(onTick+=ActionDefinition ';')*
		| 'leave' ':' 		(onLeave+=ActionDefinition ';')*
		| 'properties' ':' 	(properties+=Property ';')*
	)* 'end' endName=QN ';'
;

ActionDefinition:
	UserGivenIdentifier
;

HierarchicalStateDefinition returns StateDefinition:
	(description=Description)? isHierarchicalState?='hierarchical' 'state' DefinitionName<true> ':' (
		rememberState+=('remember') 'state' ';'
		| 'events' ':' 		(events+=Event ';')*
		| 'guards' ':' 		(guards+=Guard ';')*
		| 'transitions' ':' (transitions+=Transition ';')*
		| 'properties' ':' 	(properties+=Property ';')*		
		| 'enter' ':' 		(onEnter+=ActionDefinition ';')*
		| 'always' ':' 		(onTick+=ActionDefinition ';')*
		| 'leave' ':' 		(onLeave+=ActionDefinition ';')*
	)* 'end' endName=QN ';'
;

Event:
	UserGivenIdentifier
;

Transition:
	isInitialTransition?='init' '->' post=[StateDefinition|FQN] (hasActions?=':' actions+=ActionDefinition (',' actions+=ActionDefinition)*)?
	| pre=[StateDefinition|FQN] '-[' event=[Event] ']->' post=[StateDefinition|FQN] (hasActions?=':' actions+=ActionDefinition (',' actions+=ActionDefinition)*)?
	| pre=[StateDefinition|FQN] '-[' event=[Event] isGuarded?='/' guard=GuardExpression ']->' post=[StateDefinition|FQN] (hasActions?=':' actions+=ActionDefinition (',' actions+=ActionDefinition)*)?
;

Guard:
	UserGivenIdentifier
;

GuardExpression:
	ref=[Guard]
	| '(' ComplexGuardExpression ')' 
;

ComplexGuardExpression returns GuardExpression:
	operator='not' exp=GuardExpression 
	| left=GuardExpression operator=('and'|'or'|'xor') right=GuardExpression
;

/***************************************************************************************************************************
 * Terminals
 **************************************************************************************************************************/

terminal fragment DIGIT:
	'0'..'9'
;

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_' | '-' | DIGIT)*
;

// Copied from: org.eclipse.xtext.common.Terminals
terminal STRING:
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
;

terminal NEWLINE:
	 ('\r'? '\n')
;

terminal COMMENT:
	'//' -> NEWLINE
;

terminal INDENTION:
	' ' | '\t'
;

terminal DOC_LINE:
	'#' -> NEWLINE?
;

terminal fragment WS_CHARACTER:
	INDENTION | '\r' | '\n'
;

terminal WS:
	(WS_CHARACTER)+
;