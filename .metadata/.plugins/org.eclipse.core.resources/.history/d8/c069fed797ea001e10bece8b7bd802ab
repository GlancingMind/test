/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		switch(context) {
			case MyDslPackage.NODE_INSTANCE_REFERENCE
		}
		return super.getScope(context, reference);
	}
	
	switch(context) {
	PortReference case ref == FetamlPackage::Literals::PORT_REFERENCE__PORT: {
		scope_PortReference_port(context, ref)
	}
	SystemNodeReference case ref == FetamlPackage::Literals::SYSTEM_NODE_REFERENCE__INSTANCE: {
		scope_SystemNodeReference_instance(context, ref)
	}
	PlatformDeviceReference case ref == FetamlPackage::Literals::PLATFORM_DEVICE_REFERENCE__INSTANCE: {
		scope_PlatformDeviceReference_instance(context, ref)
	}
	FunctionMapping case ref == FetamlPackage::Literals::FUNCTION_MAPPING__NODE_FUNCTION: {
		scope_FunctionMapping_nodeFunction(context, ref)
	}
	FunctionMapping case ref == FetamlPackage::Literals::FUNCTION_MAPPING__DEVICE_FUNCTION: {
		scope_FunctionMapping_deviceFunction(context, ref)
	}
	Transition case ref == FetamlPackage::Literals::EVENT: { 
		scope_Transition_event(context, ref)
	}
	default:
		super.getScope(context, ref)
}
}
