package org.xtext.fetaml.tests.cpp

import org.junit.jupiter.api.Test
import org.xtext.fetaml.tests.GenerationTesterHelper

class LaunchFileGeneration extends GenerationTesterHelper {
	
	@Test
	def testLaunchFileGenerationWithTopicRemappingsForSingleProcesses() {
		val source = '''
			cpp package FizzBuzz:
			    description: "My awesome ROS2 package";
			    version: "0.0.0";
			    license name: "MIT";
			    maintainers:
			        "myself":"myself@example.org";
			    properties:
			        GenerateUnusedDefinitions;
			        DeleteUnusedUserCode;
			end FizzBuzz;
			
			message Number in FizzBuzz:
			    components:
			        # The number value to be send
			        Int32 value;
			end Number;
			
			node NumberSender in FizzBuzz:
			    data ports:
			        out FizzBuzz.Number number;
			end NumberSender;
			
			node FizzBuzzAnnouncer in FizzBuzz:
			    data ports:
			        in FizzBuzz.Number number;
			end FizzBuzzAnnouncer;
			
			system Mainframe in FizzBuzz:
			    node instances:
			        FizzBuzz.NumberSender publisher;
			        FizzBuzz.NumberSender publisher2;
			        FizzBuzz.FizzBuzzAnnouncer announcer;
			        FizzBuzz.FizzBuzzAnnouncer announcer2;
			    connects:
			        publisher.number - announcer.number;
			        publisher2.number - announcer2.number;
			end Mainframe;
			
			deployment SomeDeployment in FizzBuzz:
			    systems:
			        FizzBuzz.Mainframe mainframe;
			    processes:
			        FizzBuzzProc runs mainframe.publisher, mainframe.announcer, mainframe.publisher2, mainframe.announcer2;
				platforms:
					FizzBuzz.SomePlatform test;
				process mappings:
					FizzBuzzProc -> test;
			end SomeDeployment;
			
			platform SomePlatform in FizzBuzz:
				os: Linux;
			end SomePlatform;
		'''
		
		source.assertCompilesTo(#{
			"fizz_buzz/launch/Test.py" -> '''
				from launch import LaunchDescription
				from launch_ros.actions import Node
				
				def generate_launch_description():
					return LaunchDescription([
						Node(
							package='fizz_buzz',
							executable='fizz_buzz_proc',
							remappings=[
								('PublisherNodeOfSystemMainframe:rostopic://output/number', 'mainframe/publisher/output/number'),
								('AnnouncerNodeOfSystemMainframe:rostopic://input/number', 'mainframe/publisher/output/number'),
								('Publisher2NodeOfSystemMainframe:rostopic://output/number', 'mainframe/publisher2/output/number'),
								('Announcer2NodeOfSystemMainframe:rostopic://input/number', 'mainframe/publisher2/output/number'),
							]
						)
					])
			'''
		})
	}
	
	@Test
	def testLaunchFileGenerationWithTopicRemappingsForMultipleProcesses() {
		val source = '''
			cpp package FizzBuzz:
			    description: "My awesome ROS2 package";
			    version: "0.0.0";
			    license name: "MIT";
			    maintainers:
			        "myself":"myself@example.org";
			    properties:
			        GenerateUnusedDefinitions;
			        DeleteUnusedUserCode;
			end FizzBuzz;
			
			message Number in FizzBuzz:
			    components:
			        # The number value to be send
			        Int32 value;
			end Number;
			
			node NumberSender in FizzBuzz:
			    data ports:
			        out FizzBuzz.Number number;
			end NumberSender;
			
			node FizzBuzzAnnouncer in FizzBuzz:
			    data ports:
			        in FizzBuzz.Number number;
			end FizzBuzzAnnouncer;
			
			system Mainframe in FizzBuzz:
			    node instances:
			        FizzBuzz.NumberSender publisher;
			        FizzBuzz.FizzBuzzAnnouncer announcer;
			    connects:
			        publisher.number - announcer.number;
			end Mainframe;
			
			deployment SomeDeployment in FizzBuzz:
			    systems:
			        FizzBuzz.Mainframe mainframe;
			    processes:
			        Sender runs mainframe.publisher;
			        Announcer runs mainframe.announcer;
				platforms:
					FizzBuzz.SomePlatform test;
				process mappings:
					Sender -> test;
					Announcer -> test;
			end SomeDeployment;
			
			platform SomePlatform in FizzBuzz:
				os: Linux;
			end SomePlatform;
		'''
		
		source.assertCompilesTo(#{
			"fizz_buzz/launch/Test.py" -> '''
				from launch import LaunchDescription
				from launch_ros.actions import Node
				
				def generate_launch_description():
					return LaunchDescription([
						Node(
							package='fizz_buzz',
							executable='sender',
							remappings=[
								('PublisherNodeOfSystemMainframe:rostopic://output/number', 'mainframe/publisher/output/number'),
							]
						),
						Node(
							package='fizz_buzz',
							executable='announcer',
							remappings=[
								('AnnouncerNodeOfSystemMainframe:rostopic://input/number', 'mainframe/publisher/output/number'),
							]
						)
					])
			'''
		})
	}
	
	@Test
	def testLaunchFileGenerationWithOneRootSystemConnectingTwoSubsystems() {
		val source = '''
			cpp package FizzBuzz:
			    description: "My awesome ROS2 package";
			    version: "0.0.0";
			    license name: "MIT";
			    maintainers:
			        "myself":"myself@example.org";
			    properties:
			        GenerateUnusedDefinitions;
			        DeleteUnusedUserCode;
			end FizzBuzz;
			
			message Number in FizzBuzz:
			    components:
			        # The number value to be send
			        Int32 value;
			end Number;
			
			node NumberSender in FizzBuzz:
			    data ports:
			        out FizzBuzz.Number number;
			end NumberSender;
			
			system Mainframe in FizzBuzz:
				subsystems:
					FizzBuzz.AnnouncerSystem annoSystem;
			    node instances:
			        FizzBuzz.NumberSender publisher;
			    connects:
			        publisher.number - annoSystem.number; // systen port listens to publisher
			end Mainframe;
			
			system AnnouncerSystem in FizzBuzz:
				data ports:
					in FizzBuzz.Number number;
				node instances:
					FizzBuzz.FizzBuzzAnnouncer announcer;
				forwards:
					number - announcer.number; // announcer listens to system port
			end AnnouncerSystem;
			
			node FizzBuzzAnnouncer in FizzBuzz:
			    data ports:
			        in FizzBuzz.Number number;
			        out FizzBuzz.FizzBuzz answere;
			end FizzBuzzAnnouncer;
			
			message FizzBuzz in FizzBuzz:
			    components:
			        FizzBuzz.Number recieved_number;
			        Bool isFizz;
			        Bool isBuzz;
			end FizzBuzz;
			
			deployment SomeDeployment in FizzBuzz:
			    systems:
			        FizzBuzz.Mainframe mainframe;
			    processes:
			        Sender runs mainframe.publisher;
			        Announcer runs mainframe.annoSystem.announcer;
				platforms:
					FizzBuzz.SomePlatform test;
				process mappings:
					Sender -> test;
					Announcer -> test;
			end SomeDeployment;
			
			platform SomePlatform in FizzBuzz:
				os: Linux;
			end SomePlatform;
		'''
		
		source.assertCompilesTo(#{
			"fizz_buzz/launch/Test.py" -> '''
				from launch import LaunchDescription
				from launch_ros.actions import Node
				
				def generate_launch_description():
					return LaunchDescription([
						Node(
							package='fizz_buzz',
							executable='sender',
							remappings=[
								('PublisherNodeOfSystemMainframe:rostopic://output/number', 'mainframe/publisher/output/number'),
							]
						),
						Node(
							package='fizz_buzz',
							executable='announcer',
							remappings=[
								('AnnouncerNodeOfSystemMainframeAnnoSystem:rostopic://input/number', 'mainframe/publisher/output/number'),
							]
						)
					])
			'''
		})
	}
	
	@Test
	def testLaunchFileGenerationWithMultipleSystemOnMultipleProcesses() {
		val source = '''
			cpp package FizzBuzz:
				description: "My awesome ROS2 package";
			    version: "0.0.0";
			    license name: "MIT";
			    maintainers:
			        "myself":"myself@example.org";
			    properties:
			        GenerateUnusedDefinitions;
			        DeleteUnusedUserCode;
			end FizzBuzz;
			
			system Mainframe in FizzBuzz:
				subsystems:
					FizzBuzz.PublisherSystem publisherSystem;
					FizzBuzz.AnnouncerSystem annoSystem;
			    connects:
			       publisherSystem.number - annoSystem.number;
			end Mainframe;
			
			system PublisherSystem in FizzBuzz:
				data ports:
					out FizzBuzz.Number number;
			    node instances:
			        FizzBuzz.NumberSender publisher;
			    forwards:
			        publisher.number - number;
			end PublisherSystem;
			
			system AnnouncerSystem in FizzBuzz:
				data ports:
					in FizzBuzz.Number number;
				node instances:
					FizzBuzz.FizzBuzzAnnouncer announcer;
				forwards:
					number - announcer.number;
			end AnnouncerSystem;
			
			node NumberSender in FizzBuzz:
			    data ports:
			        out FizzBuzz.Number number;
			end NumberSender;
			
			node FizzBuzzAnnouncer in FizzBuzz:
			    data ports:
			        in FizzBuzz.Number number;
			        out FizzBuzz.FizzBuzz answere;
			end FizzBuzzAnnouncer;
			
			message Number in FizzBuzz:
			    components:
			        # The number value to be send
			        Int32 value;
			end Number;
			
			message FizzBuzz in FizzBuzz:
			    components:
			        FizzBuzz.Number recieved_number;
			        Bool isFizz;
			        Bool isBuzz;
			end FizzBuzz;
			
			deployment SomeDeployment in FizzBuzz:
			    systems:
			        FizzBuzz.Mainframe mainframe;
			    processes:
			        Sender runs mainframe.publisherSystem.publisher;
			        Announcer runs mainframe.annoSystem.announcer;
				platforms:
					FizzBuzz.SomePlatform test;
				process mappings:
					Sender -> test;
					Announcer -> test;
			end SomeDeployment;
			
			platform SomePlatform in FizzBuzz:
				os: Linux;
			end SomePlatform;
		'''
		
		source.assertCompilesTo(#{
			"fizz_buzz/launch/Test.py" -> '''
				from launch import LaunchDescription
				from launch_ros.actions import Node
				
				def generate_launch_description():
					return LaunchDescription([
						Node(
							package='fizz_buzz',
							executable='sender',
							remappings=[
								('PublisherNodeOfSystemMainframePublisherSystem:rostopic://output/number', 'mainframe/publisher_system/publisher/output/number'),
							]
						),
						Node(
							package='fizz_buzz',
							executable='announcer',
							remappings=[
								('AnnouncerNodeOfSystemMainframeAnnoSystem:rostopic://input/number', 'mainframe/publisher_system/publisher/output/number'),
							]
						)
					])
			'''
		})
	}
	
	@Test
	def testLaunchFileGenerationWithImplicitlyIntroducedMultiplexerNode() {
		val source = '''
			cpp package FizzBuzz:
				description: "My awesome ROS2 package";
			    version: "0.0.0";
			    license name: "MIT";
			    maintainers:
			        "myself":"myself@example.org";
			    properties:
			        GenerateUnusedDefinitions;
			        DeleteUnusedUserCode;
			end FizzBuzz;
			
			system Mainframe in FizzBuzz:
				subsystems:
					FizzBuzz.PublisherSystem publisherSystem;
					FizzBuzz.AnnouncerSystem annoSystem;
			    connects:
			       publisherSystem.number - annoSystem.number;
			end Mainframe;
			
			system PublisherSystem in FizzBuzz:
				data ports:
					out FizzBuzz.Number number;
			    node instances:
			        FizzBuzz.NumberSender publisher1;
			        FizzBuzz.NumberSender publisher2;
			    forwards:
			        publisher1.number - number;
			        publisher2.number - number;
			end PublisherSystem;
			
			system AnnouncerSystem in FizzBuzz:
				data ports:
					in FizzBuzz.Number number;
				node instances:
					FizzBuzz.FizzBuzzAnnouncer announcer;
				forwards:
					number - announcer.number;
			end AnnouncerSystem;
			
			node NumberSender in FizzBuzz:
			    data ports:
			        out FizzBuzz.Number number;
			end NumberSender;
			
			node FizzBuzzAnnouncer in FizzBuzz:
			    data ports:
			        in FizzBuzz.Number number;
			        out FizzBuzz.FizzBuzz answere;
			end FizzBuzzAnnouncer;
			
			message Number in FizzBuzz:
			    components:
			        # The number value to be send
			        Int32 value;
			end Number;
			
			message FizzBuzz in FizzBuzz:
			    components:
			        FizzBuzz.Number recieved_number;
			        Bool isFizz;
			        Bool isBuzz;
			end FizzBuzz;
			
			deployment SomeDeployment in FizzBuzz:
			    systems:
			        FizzBuzz.Mainframe mainframe;
			    processes:
			        Sender runs mainframe.publisherSystem.publisher1, mainframe.publisherSystem.publisher2;
			        Announcer runs mainframe.annoSystem.announcer;
				platforms:
					FizzBuzz.SomePlatform test;
				process mappings:
					Sender -> test;
					Announcer -> test;
			end SomeDeployment;
			
			platform SomePlatform in FizzBuzz:
				os: Linux;
			end SomePlatform;
		'''
		
		source.assertCompilesTo(#{
			"fizz_buzz/package.xml" -> '''
				<?xml version="1.0"?>
				<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
				<package format="3">
					<name>fizz_buzz</name>
					<version>0.0.0</version>
					<description>My awesome ROS2 package</description>
					<maintainer email="myself@example.org">myself</maintainer>
					<license>MIT</license>
					<build_depend>rosidl_default_generators</build_depend>
					
					<buildtool_depend>ament_cmake</buildtool_depend>
					
					<exec_depend>rclcpp</exec_depend>
					<exec_depend>rosidl_default_runtime</exec_depend>
					<exec_depend>ros2launch</exec_depend>
					<exec_depend>topic_tools</exec_depend>
					
					<test_depend>ament_lint_auto</test_depend>
					<test_depend>ament_lint_common</test_depend>
					
					<member_of_group>rosidl_interface_packages</member_of_group>
					
					<export>
						<build_type>ament_cmake</build_type>
					</export>
				</package>
			''',
			"fizz_buzz/launch/Test.py" -> '''
				from launch import LaunchDescription
				from launch_ros.actions import Node
				
				def generate_launch_description():
					return LaunchDescription([
						Node(
							package='topic_tools',
							executable='mux',
							parameters=[{
								"input_topics": [
									"mainframe/publisher_system/publisher1/output/number",
									"mainframe/publisher_system/publisher2/output/number"
								],
								"output_topic": "mainframe/multiplexer_0/output/number"
							}]
						),
						Node(
							package='fizz_buzz',
							executable='sender',
							remappings=[
								('Publisher1NodeOfSystemMainframePublisherSystem:rostopic://output/number', 'mainframe/publisher_system/publisher1/output/number'),
								('Publisher2NodeOfSystemMainframePublisherSystem:rostopic://output/number', 'mainframe/publisher_system/publisher2/output/number'),
							]
						),
						Node(
							package='fizz_buzz',
							executable='announcer',
							remappings=[
								('AnnouncerNodeOfSystemMainframeAnnoSystem:rostopic://input/number', 'mainframe/multiplexer_0/output/number'),
							]
						)
					])
			'''
		})
	}
	
	@Test
	def testLaunchFileGenerationOfTwoPlatformsWithImplicitlyIntroducedMultiplexerNode() {
		val source = '''
			cpp package FizzBuzz:
				description: "My awesome ROS2 package";
			    version: "0.0.0";
			    license name: "MIT";
			    maintainers:
			        "myself":"myself@example.org";
			    properties:
			        GenerateUnusedDefinitions;
			        DeleteUnusedUserCode;
			end FizzBuzz;
			
			system Mainframe in FizzBuzz:
				subsystems:
					FizzBuzz.PublisherSystem publisherSystem;
					FizzBuzz.AnnouncerSystem annoSystem;
			    connects:
			       publisherSystem.number - annoSystem.number;
			end Mainframe;
			
			system PublisherSystem in FizzBuzz:
				data ports:
					out FizzBuzz.Number number;
			    node instances:
			        FizzBuzz.NumberSender publisher1;
			        FizzBuzz.NumberSender publisher2;
			    forwards:
			        publisher1.number - number;
			        publisher2.number - number;
			end PublisherSystem;
			
			system AnnouncerSystem in FizzBuzz:
				data ports:
					in FizzBuzz.Number number;
				node instances:
					FizzBuzz.FizzBuzzAnnouncer announcer;
				forwards:
					number - announcer.number;
			end AnnouncerSystem;
			
			node NumberSender in FizzBuzz:
			    data ports:
			        out FizzBuzz.Number number;
			end NumberSender;
			
			node FizzBuzzAnnouncer in FizzBuzz:
			    data ports:
			        in FizzBuzz.Number number;
			        out FizzBuzz.FizzBuzz answere;
			end FizzBuzzAnnouncer;
			
			message Number in FizzBuzz:
			    components:
			        # The number value to be send
			        Int32 value;
			end Number;
			
			message FizzBuzz in FizzBuzz:
			    components:
			        FizzBuzz.Number recieved_number;
			        Bool isFizz;
			        Bool isBuzz;
			end FizzBuzz;
			
			deployment SomeDeployment in FizzBuzz:
			    systems:
			        FizzBuzz.Mainframe mainframe;
			    processes:
			        Sender runs mainframe.publisherSystem.publisher1, mainframe.publisherSystem.publisher2;
			        Announcer runs mainframe.annoSystem.announcer;
				platforms:
					FizzBuzz.SomePlatform plat1;
					FizzBuzz.SomePlatform plat2;
				process mappings:
					Sender -> plat1;
					Announcer -> plat2;
			end SomeDeployment;
			
			platform SomePlatform in FizzBuzz:
				os: Linux;
			end SomePlatform;
		'''
		
		source.assertCompilesTo(#{
			"fizz_buzz/CMakeLists.txt" -> '''
				cmake_minimum_required(VERSION 3.5)
				project(fizz_buzz)
				
				# Default to C99
				if(NOT CMAKE_C_STANDARD)
				  set(CMAKE_C_STANDARD 99)
				endif()
				
				# Default to C++14
				if(NOT CMAKE_CXX_STANDARD)
				  set(CMAKE_CXX_STANDARD 14)
				endif()
				
				if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
				  add_compile_options(-Wall -Wextra -Wpedantic)
				endif()
				
				find_package(ament_cmake REQUIRED)
				find_package(rclcpp REQUIRED)
				find_package(rosidl_default_generators REQUIRED)
				
				rosidl_generate_interfaces(${PROJECT_NAME}
					"msg/Number.msg"
					"msg/FizzBuzz.msg"
				)
				ament_export_dependencies(rosidl_default_runtime)
				
				add_library(fizz_buzz_lib
					src/NumberSenderBase.cpp
					user-code/src/FizzBuzzAnnouncer.cpp
					src/FizzBuzzAnnouncerBase.cpp
					src/SenderProcess.cpp
					src/AnnouncerProcess.cpp
				)
				
				target_include_directories(fizz_buzz_lib
					PUBLIC
						$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/fizz_buzz>
						$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/user-code/include/fizz_buzz>
						$<INSTALL_INTERFACE:include>
				)
				
				ament_target_dependencies(fizz_buzz_lib
					rclcpp
				)
				
				rosidl_get_typesupport_target(cpp_typesupport_target ${PROJECT_NAME}
					rosidl_typesupport_cpp)
				target_link_libraries(fizz_buzz_lib "${cpp_typesupport_target}")
				
				ament_export_targets(fizz_buzz_lib_targets HAS_LIBRARY_TARGET)
				
				add_executable(sender user-code/src/SenderEntryPoint.cpp)
				target_link_libraries(sender fizz_buzz_lib)
				add_executable(announcer user-code/src/AnnouncerEntryPoint.cpp)
				target_link_libraries(announcer fizz_buzz_lib)
				
				######################################################################
				# Load user defined CMakeFile if present
				# But first the PKG_LIB_NAME variable is set, so that the included 
				# CMakeLists doesn't have to refer to the real library-target-name.
				# Therefore reducing errors or changes when the library name might 
				# change.
				set(PKG_LIB_TARGET_NAME fizz_buzz_lib)
				set(EXECUTABLE_TARGET_NAMES sender announcer)
				
				if((EXISTS ${CMAKE_CURRENT_LIST_DIR}/user-code)
				    AND (IS_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/user-code)
				    AND (EXISTS ${CMAKE_CURRENT_LIST_DIR}/user-code/CMakeLists.txt))
				    
				    message("Loading user-code/CMakeLists.txt...")
				    add_subdirectory(user-code)
				    message("...loaded user-code/CMakeLists.txt.")
				else()
					message("No CMakeLists.txt in user-code-directory \"user-code\" found. Skip loading.")
				endif()
				######################################################################
				
				install(
					DIRECTORY include/
					DESTINATION include
				)
				
				install(
					TARGETS fizz_buzz_lib
					EXPORT fizz_buzz_lib_targets
					LIBRARY DESTINATION lib
					ARCHIVE DESTINATION lib
					RUNTIME DESTINATION bin
					INCLUDES DESTINATION include
				)
				
				install(
					TARGETS
						sender
						announcer
					DESTINATION
						lib/${PROJECT_NAME}
				)
				
				install(DIRECTORY launch DESTINATION share/${PROJECT_NAME})
				
				ament_package()
			''',
			"fizz_buzz/launch/Plat1.py" -> '''
				from launch import LaunchDescription
				from launch_ros.actions import Node
				
				def generate_launch_description():
					return LaunchDescription([
						Node(
							package='topic_tools',
							executable='mux',
							parameters=[{
								"input_topics": [
									"mainframe/publisher_system/publisher1/output/number",
									"mainframe/publisher_system/publisher2/output/number"
								],
								"output_topic": "mainframe/multiplexer_0/output/number"
							}]
						),
						Node(
							package='fizz_buzz',
							executable='sender',
							remappings=[
								('Publisher1NodeOfSystemMainframePublisherSystem:rostopic://output/number', 'mainframe/publisher_system/publisher1/output/number'),
								('Publisher2NodeOfSystemMainframePublisherSystem:rostopic://output/number', 'mainframe/publisher_system/publisher2/output/number'),
							]
						)
					])
			''',
			"fizz_buzz/launch/Plat2.py" -> '''
				from launch import LaunchDescription
				from launch_ros.actions import Node
				
				def generate_launch_description():
					return LaunchDescription([
						Node(
							package='fizz_buzz',
							executable='announcer',
							remappings=[
								('AnnouncerNodeOfSystemMainframeAnnoSystem:rostopic://input/number', 'mainframe/multiplexer_0/output/number'),
							]
						)
					])
			'''
		})
	}
}