/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.scoping;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NodeInstance;
import org.xtext.example.mydsl.myDsl.NodeInstanceReference;
import org.xtext.example.mydsl.myDsl.SystemInstance;
import org.xtext.example.mydsl.myDsl.SystemReference;

@SuppressWarnings("all")
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _switchResult = null;
    boolean _matched = false;
    if (context instanceof NodeInstanceReference) {
      boolean _equals = Objects.equal(reference, MyDslPackage.Literals.NODE_INSTANCE_REFERENCE__NODE);
      if (_equals) {
        _matched=true;
        _switchResult = this.getScopeForNodeInstanceReferenceNode(((NodeInstanceReference)context), reference);
      }
    }
    if (!_matched) {
      if (context instanceof SystemReference) {
        boolean _equals = Objects.equal(reference, MyDslPackage.Literals.SYSTEM_REFERENCE__SUBSYSTEM);
        if (_equals) {
          _matched=true;
          _switchResult = this.getScopeForSystemReferenceSubSystem(((SystemReference)context), reference);
        }
      }
    }
    if (!_matched) {
      _switchResult = super.getScope(context, reference);
    }
    return _switchResult;
  }
  
  private IScope getScopeForNodeInstanceReferenceNode(final NodeInstanceReference nodeRef, final EReference reference) {
    SystemReference sysRef = nodeRef.getBelongingSystemReference();
    while ((sysRef.getSubsystem() != null)) {
      sysRef = sysRef.getSubsystem();
    }
    final EList<NodeInstance> candidates = sysRef.getSystem().getType().getNodes();
    return Scopes.scopeFor(candidates);
  }
  
  private IScope getScopeForSystemReferenceSubSystem(final SystemReference sysRef, final EReference reference) {
    final EList<SystemInstance> candidates = sysRef.getSystem().getType().getSubsystems();
    return Scopes.scopeFor(candidates);
  }
}
