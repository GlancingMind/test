/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.scoping;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.myDsl.DeploymentStatement;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NodeInstance;
import org.xtext.example.mydsl.myDsl.SubSystemReference;
import org.xtext.example.mydsl.myDsl.SystemDefinition;
import org.xtext.example.mydsl.myDsl.SystemInstance;
import org.xtext.example.mydsl.myDsl.SystemReference;

@SuppressWarnings("all")
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _switchResult = null;
    boolean _matched = false;
    if (context instanceof SubSystemReference) {
      boolean _equals = Objects.equal(reference, MyDslPackage.Literals.SYSTEM_REFERENCE__SYSTEM);
      if (_equals) {
        _matched=true;
        _switchResult = this.getScopeForSubSystemReference_System(((SubSystemReference)context), reference);
      }
    }
    if (!_matched) {
      if (context instanceof DeploymentStatement) {
        boolean _equals = Objects.equal(reference, MyDslPackage.Literals.DEPLOYMENT_STATEMENT__NODE);
        if (_equals) {
          _matched=true;
          _switchResult = this.getScopeForDeploymentStatement_node(((DeploymentStatement)context), reference);
        }
      }
    }
    if (!_matched) {
      _switchResult = super.getScope(context, reference);
    }
    return _switchResult;
  }
  
  private IScope getScopeForSubSystemReference_System(final SubSystemReference subSysRef, final EReference reference) {
    SystemReference _parent = null;
    if (subSysRef!=null) {
      _parent=subSysRef.getParent();
    }
    SystemInstance _system = null;
    if (_parent!=null) {
      _system=_parent.getSystem();
    }
    SystemDefinition _type = null;
    if (_system!=null) {
      _type=_system.getType();
    }
    EList<SystemInstance> _subsystems = null;
    if (_type!=null) {
      _subsystems=_type.getSubsystems();
    }
    final EList<SystemInstance> subsystemsOfParentSystem = _subsystems;
    boolean _isNullOrEmpty = IterableExtensions.isNullOrEmpty(subsystemsOfParentSystem);
    if (_isNullOrEmpty) {
      return IScope.NULLSCOPE;
    }
    return Scopes.scopeFor(subsystemsOfParentSystem);
  }
  
  private IScope getScopeForDeploymentStatement_node(final DeploymentStatement deployment, final EReference reference) {
    SystemReference _systemRef = null;
    if (deployment!=null) {
      _systemRef=deployment.getSystemRef();
    }
    SystemInstance _system = null;
    if (_systemRef!=null) {
      _system=_systemRef.getSystem();
    }
    SystemDefinition _type = null;
    if (_system!=null) {
      _type=_system.getType();
    }
    EList<NodeInstance> _nodes = null;
    if (_type!=null) {
      _nodes=_type.getNodes();
    }
    final EList<NodeInstance> nodes = _nodes;
    boolean _isNullOrEmpty = IterableExtensions.isNullOrEmpty(nodes);
    if (_isNullOrEmpty) {
      return IScope.NULLSCOPE;
    }
    return Scopes.scopeFor(nodes);
  }
}
