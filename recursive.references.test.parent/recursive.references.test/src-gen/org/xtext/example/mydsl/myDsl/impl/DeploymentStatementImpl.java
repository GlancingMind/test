/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.DeploymentStatement;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NodeInstance;
import org.xtext.example.mydsl.myDsl.PlatformInstance;
import org.xtext.example.mydsl.myDsl.SubSystemReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Deployment Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DeploymentStatementImpl#getSystem <em>System</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DeploymentStatementImpl#getNode <em>Node</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DeploymentStatementImpl#getPlatform <em>Platform</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeploymentStatementImpl extends MinimalEObjectImpl.Container implements DeploymentStatement
{
  /**
   * The cached value of the '{@link #getSystem() <em>System</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystem()
   * @generated
   * @ordered
   */
  protected SubSystemReference system;

  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected NodeInstance node;

  /**
   * The cached value of the '{@link #getPlatform() <em>Platform</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlatform()
   * @generated
   * @ordered
   */
  protected PlatformInstance platform;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.DEPLOYMENT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubSystemReference getSystem()
  {
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSystem(SubSystemReference newSystem, NotificationChain msgs)
  {
    SubSystemReference oldSystem = system;
    system = newSystem;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM, oldSystem, newSystem);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSystem(SubSystemReference newSystem)
  {
    if (newSystem != system)
    {
      NotificationChain msgs = null;
      if (system != null)
        msgs = ((InternalEObject)system).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM, null, msgs);
      if (newSystem != null)
        msgs = ((InternalEObject)newSystem).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM, null, msgs);
      msgs = basicSetSystem(newSystem, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM, newSystem, newSystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeInstance getNode()
  {
    if (node != null && node.eIsProxy())
    {
      InternalEObject oldNode = (InternalEObject)node;
      node = (NodeInstance)eResolveProxy(oldNode);
      if (node != oldNode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.DEPLOYMENT_STATEMENT__NODE, oldNode, node));
      }
    }
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeInstance basicGetNode()
  {
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNode(NodeInstance newNode)
  {
    NodeInstance oldNode = node;
    node = newNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DEPLOYMENT_STATEMENT__NODE, oldNode, node));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlatformInstance getPlatform()
  {
    if (platform != null && platform.eIsProxy())
    {
      InternalEObject oldPlatform = (InternalEObject)platform;
      platform = (PlatformInstance)eResolveProxy(oldPlatform);
      if (platform != oldPlatform)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.DEPLOYMENT_STATEMENT__PLATFORM, oldPlatform, platform));
      }
    }
    return platform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlatformInstance basicGetPlatform()
  {
    return platform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlatform(PlatformInstance newPlatform)
  {
    PlatformInstance oldPlatform = platform;
    platform = newPlatform;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DEPLOYMENT_STATEMENT__PLATFORM, oldPlatform, platform));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM:
        return basicSetSystem(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM:
        return getSystem();
      case MyDslPackage.DEPLOYMENT_STATEMENT__NODE:
        if (resolve) return getNode();
        return basicGetNode();
      case MyDslPackage.DEPLOYMENT_STATEMENT__PLATFORM:
        if (resolve) return getPlatform();
        return basicGetPlatform();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM:
        setSystem((SubSystemReference)newValue);
        return;
      case MyDslPackage.DEPLOYMENT_STATEMENT__NODE:
        setNode((NodeInstance)newValue);
        return;
      case MyDslPackage.DEPLOYMENT_STATEMENT__PLATFORM:
        setPlatform((PlatformInstance)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM:
        setSystem((SubSystemReference)null);
        return;
      case MyDslPackage.DEPLOYMENT_STATEMENT__NODE:
        setNode((NodeInstance)null);
        return;
      case MyDslPackage.DEPLOYMENT_STATEMENT__PLATFORM:
        setPlatform((PlatformInstance)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT_STATEMENT__SYSTEM:
        return system != null;
      case MyDslPackage.DEPLOYMENT_STATEMENT__NODE:
        return node != null;
      case MyDslPackage.DEPLOYMENT_STATEMENT__PLATFORM:
        return platform != null;
    }
    return super.eIsSet(featureID);
  }

} //DeploymentStatementImpl
