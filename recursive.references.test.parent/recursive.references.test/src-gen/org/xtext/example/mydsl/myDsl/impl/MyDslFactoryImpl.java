/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.MODEL: return createModel();
      case MyDslPackage.NODE_DEFINITION: return createNodeDefinition();
      case MyDslPackage.NODE_INSTANCE: return createNodeInstance();
      case MyDslPackage.SYSTEM_DEFINITION: return createSystemDefinition();
      case MyDslPackage.SYSTEM_INSTANCE: return createSystemInstance();
      case MyDslPackage.SYSTEM_REFERENCE: return createSystemReference();
      case MyDslPackage.NODE_INSTANCE_REFERENCE: return createNodeInstanceReference();
      case MyDslPackage.DEPLOYMENT_STATEMENT: return createDeploymentStatement();
      case MyDslPackage.DEPLOYMENT: return createDeployment();
      case MyDslPackage.PLATFORM_INSTANCE: return createPlatformInstance();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeDefinition createNodeDefinition()
  {
    NodeDefinitionImpl nodeDefinition = new NodeDefinitionImpl();
    return nodeDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeInstance createNodeInstance()
  {
    NodeInstanceImpl nodeInstance = new NodeInstanceImpl();
    return nodeInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemDefinition createSystemDefinition()
  {
    SystemDefinitionImpl systemDefinition = new SystemDefinitionImpl();
    return systemDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemInstance createSystemInstance()
  {
    SystemInstanceImpl systemInstance = new SystemInstanceImpl();
    return systemInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemReference createSystemReference()
  {
    SystemReferenceImpl systemReference = new SystemReferenceImpl();
    return systemReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeInstanceReference createNodeInstanceReference()
  {
    NodeInstanceReferenceImpl nodeInstanceReference = new NodeInstanceReferenceImpl();
    return nodeInstanceReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeploymentStatement createDeploymentStatement()
  {
    DeploymentStatementImpl deploymentStatement = new DeploymentStatementImpl();
    return deploymentStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Deployment createDeployment()
  {
    DeploymentImpl deployment = new DeploymentImpl();
    return deployment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlatformInstance createPlatformInstance()
  {
    PlatformInstanceImpl platformInstance = new PlatformInstanceImpl();
    return platformInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
