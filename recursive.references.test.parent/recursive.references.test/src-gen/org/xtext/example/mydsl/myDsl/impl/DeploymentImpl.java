/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Deployment;
import org.xtext.example.mydsl.myDsl.DeploymentStatement;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PlatformInstance;
import org.xtext.example.mydsl.myDsl.SystemInstance;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Deployment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DeploymentImpl#getPlatforms <em>Platforms</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DeploymentImpl#getSystems <em>Systems</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.DeploymentImpl#getDeployments <em>Deployments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeploymentImpl extends MinimalEObjectImpl.Container implements Deployment
{
  /**
   * The cached value of the '{@link #getPlatforms() <em>Platforms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlatforms()
   * @generated
   * @ordered
   */
  protected EList<PlatformInstance> platforms;

  /**
   * The cached value of the '{@link #getSystems() <em>Systems</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystems()
   * @generated
   * @ordered
   */
  protected EList<SystemInstance> systems;

  /**
   * The cached value of the '{@link #getDeployments() <em>Deployments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeployments()
   * @generated
   * @ordered
   */
  protected EList<DeploymentStatement> deployments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.DEPLOYMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PlatformInstance> getPlatforms()
  {
    if (platforms == null)
    {
      platforms = new EObjectContainmentEList<PlatformInstance>(PlatformInstance.class, this, MyDslPackage.DEPLOYMENT__PLATFORMS);
    }
    return platforms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SystemInstance> getSystems()
  {
    if (systems == null)
    {
      systems = new EObjectContainmentEList<SystemInstance>(SystemInstance.class, this, MyDslPackage.DEPLOYMENT__SYSTEMS);
    }
    return systems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DeploymentStatement> getDeployments()
  {
    if (deployments == null)
    {
      deployments = new EObjectContainmentEList<DeploymentStatement>(DeploymentStatement.class, this, MyDslPackage.DEPLOYMENT__DEPLOYMENTS);
    }
    return deployments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT__PLATFORMS:
        return ((InternalEList<?>)getPlatforms()).basicRemove(otherEnd, msgs);
      case MyDslPackage.DEPLOYMENT__SYSTEMS:
        return ((InternalEList<?>)getSystems()).basicRemove(otherEnd, msgs);
      case MyDslPackage.DEPLOYMENT__DEPLOYMENTS:
        return ((InternalEList<?>)getDeployments()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT__PLATFORMS:
        return getPlatforms();
      case MyDslPackage.DEPLOYMENT__SYSTEMS:
        return getSystems();
      case MyDslPackage.DEPLOYMENT__DEPLOYMENTS:
        return getDeployments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT__PLATFORMS:
        getPlatforms().clear();
        getPlatforms().addAll((Collection<? extends PlatformInstance>)newValue);
        return;
      case MyDslPackage.DEPLOYMENT__SYSTEMS:
        getSystems().clear();
        getSystems().addAll((Collection<? extends SystemInstance>)newValue);
        return;
      case MyDslPackage.DEPLOYMENT__DEPLOYMENTS:
        getDeployments().clear();
        getDeployments().addAll((Collection<? extends DeploymentStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT__PLATFORMS:
        getPlatforms().clear();
        return;
      case MyDslPackage.DEPLOYMENT__SYSTEMS:
        getSystems().clear();
        return;
      case MyDslPackage.DEPLOYMENT__DEPLOYMENTS:
        getDeployments().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DEPLOYMENT__PLATFORMS:
        return platforms != null && !platforms.isEmpty();
      case MyDslPackage.DEPLOYMENT__SYSTEMS:
        return systems != null && !systems.isEmpty();
      case MyDslPackage.DEPLOYMENT__DEPLOYMENTS:
        return deployments != null && !deployments.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DeploymentImpl
