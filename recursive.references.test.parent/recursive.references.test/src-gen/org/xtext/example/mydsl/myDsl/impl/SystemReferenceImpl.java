/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.SystemInstance;
import org.xtext.example.mydsl.myDsl.SystemReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>System Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemReferenceImpl#getSystem <em>System</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemReferenceImpl#getSubsystem <em>Subsystem</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SystemReferenceImpl extends MinimalEObjectImpl.Container implements SystemReference
{
  /**
   * The cached value of the '{@link #getSystem() <em>System</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystem()
   * @generated
   * @ordered
   */
  protected SystemInstance system;

  /**
   * The cached value of the '{@link #getSubsystem() <em>Subsystem</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubsystem()
   * @generated
   * @ordered
   */
  protected SystemReference subsystem;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SystemReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SYSTEM_REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemInstance getSystem()
  {
    if (system != null && system.eIsProxy())
    {
      InternalEObject oldSystem = (InternalEObject)system;
      system = (SystemInstance)eResolveProxy(oldSystem);
      if (system != oldSystem)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.SYSTEM_REFERENCE__SYSTEM, oldSystem, system));
      }
    }
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemInstance basicGetSystem()
  {
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSystem(SystemInstance newSystem)
  {
    SystemInstance oldSystem = system;
    system = newSystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SYSTEM_REFERENCE__SYSTEM, oldSystem, system));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemReference getSubsystem()
  {
    if (subsystem != null && subsystem.eIsProxy())
    {
      InternalEObject oldSubsystem = (InternalEObject)subsystem;
      subsystem = (SystemReference)eResolveProxy(oldSubsystem);
      if (subsystem != oldSubsystem)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.SYSTEM_REFERENCE__SUBSYSTEM, oldSubsystem, subsystem));
      }
    }
    return subsystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SystemReference basicGetSubsystem()
  {
    return subsystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubsystem(SystemReference newSubsystem)
  {
    SystemReference oldSubsystem = subsystem;
    subsystem = newSubsystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SYSTEM_REFERENCE__SUBSYSTEM, oldSubsystem, subsystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM_REFERENCE__SYSTEM:
        if (resolve) return getSystem();
        return basicGetSystem();
      case MyDslPackage.SYSTEM_REFERENCE__SUBSYSTEM:
        if (resolve) return getSubsystem();
        return basicGetSubsystem();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM_REFERENCE__SYSTEM:
        setSystem((SystemInstance)newValue);
        return;
      case MyDslPackage.SYSTEM_REFERENCE__SUBSYSTEM:
        setSubsystem((SystemReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM_REFERENCE__SYSTEM:
        setSystem((SystemInstance)null);
        return;
      case MyDslPackage.SYSTEM_REFERENCE__SUBSYSTEM:
        setSubsystem((SystemReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM_REFERENCE__SYSTEM:
        return system != null;
      case MyDslPackage.SYSTEM_REFERENCE__SUBSYSTEM:
        return subsystem != null;
    }
    return super.eIsSet(featureID);
  }

} //SystemReferenceImpl
