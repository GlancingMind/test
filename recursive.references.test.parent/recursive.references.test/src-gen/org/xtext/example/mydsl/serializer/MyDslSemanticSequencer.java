/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Deployment;
import org.xtext.example.mydsl.myDsl.DeploymentStatement;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NodeDefinition;
import org.xtext.example.mydsl.myDsl.NodeInstance;
import org.xtext.example.mydsl.myDsl.NodeInstanceReference;
import org.xtext.example.mydsl.myDsl.PlatformInstance;
import org.xtext.example.mydsl.myDsl.SystemDefinition;
import org.xtext.example.mydsl.myDsl.SystemInstance;
import org.xtext.example.mydsl.myDsl.SystemReference;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.DEPLOYMENT:
				sequence_Deployment(context, (Deployment) semanticObject); 
				return; 
			case MyDslPackage.DEPLOYMENT_STATEMENT:
				sequence_DeploymentStatement(context, (DeploymentStatement) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.NODE_DEFINITION:
				sequence_NodeDefinition(context, (NodeDefinition) semanticObject); 
				return; 
			case MyDslPackage.NODE_INSTANCE:
				sequence_NodeInstance(context, (NodeInstance) semanticObject); 
				return; 
			case MyDslPackage.NODE_INSTANCE_REFERENCE:
				sequence_NodeInstanceReference(context, (NodeInstanceReference) semanticObject); 
				return; 
			case MyDslPackage.PLATFORM_INSTANCE:
				sequence_PlatformInstance(context, (PlatformInstance) semanticObject); 
				return; 
			case MyDslPackage.SYSTEM_DEFINITION:
				sequence_SystemDefinition(context, (SystemDefinition) semanticObject); 
				return; 
			case MyDslPackage.SYSTEM_INSTANCE:
				sequence_SystemInstance(context, (SystemInstance) semanticObject); 
				return; 
			case MyDslPackage.SYSTEM_REFERENCE:
				sequence_SystemReference(context, (SystemReference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeploymentStatement returns DeploymentStatement
	 *
	 * Constraint:
	 *     (nodes=NodeInstanceReference platform=[PlatformInstance|ID])
	 * </pre>
	 */
	protected void sequence_DeploymentStatement(ISerializationContext context, DeploymentStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEPLOYMENT_STATEMENT__NODES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEPLOYMENT_STATEMENT__NODES));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DEPLOYMENT_STATEMENT__PLATFORM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DEPLOYMENT_STATEMENT__PLATFORM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeploymentStatementAccess().getNodesNodeInstanceReferenceParserRuleCall_1_0(), semanticObject.getNodes());
		feeder.accept(grammarAccess.getDeploymentStatementAccess().getPlatformPlatformInstanceIDTerminalRuleCall_3_0_1(), semanticObject.eGet(MyDslPackage.Literals.DEPLOYMENT_STATEMENT__PLATFORM, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Deployment returns Deployment
	 *
	 * Constraint:
	 *     (platforms+=PlatformInstance* systems+=SystemInstance* deployments+=DeploymentStatement*)
	 * </pre>
	 */
	protected void sequence_Deployment(ISerializationContext context, Deployment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (nodes+=NodeDefinition | systems+=SystemDefinition | deployments+=Deployment)+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NodeDefinition returns NodeDefinition
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_NodeDefinition(ISerializationContext context, NodeDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NODE_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NODE_DEFINITION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeDefinitionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NodeInstanceReference returns NodeInstanceReference
	 *     NodeInstanceReference.NodeInstanceReference_1_0 returns NodeInstanceReference
	 *
	 * Constraint:
	 *     (ref=NodeInstanceReference_NodeInstanceReference_1_0 tail=[Feature|ID])
	 * </pre>
	 */
	protected void sequence_NodeInstanceReference(ISerializationContext context, NodeInstanceReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NODE_INSTANCE_REFERENCE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NODE_INSTANCE_REFERENCE__REF));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NODE_INSTANCE_REFERENCE__TAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NODE_INSTANCE_REFERENCE__TAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeInstanceReferenceAccess().getNodeInstanceReferenceRefAction_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getNodeInstanceReferenceAccess().getTailFeatureIDTerminalRuleCall_1_2_0_1(), semanticObject.eGet(MyDslPackage.Literals.NODE_INSTANCE_REFERENCE__TAIL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NodeInstance returns NodeInstance
	 *     Feature returns NodeInstance
	 *
	 * Constraint:
	 *     (type=[NodeDefinition|ID] name=ID)
	 * </pre>
	 */
	protected void sequence_NodeInstance(ISerializationContext context, NodeInstance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NODE_INSTANCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NODE_INSTANCE__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FEATURE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeInstanceAccess().getTypeNodeDefinitionIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.NODE_INSTANCE__TYPE, false));
		feeder.accept(grammarAccess.getNodeInstanceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlatformInstance returns PlatformInstance
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_PlatformInstance(ISerializationContext context, PlatformInstance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PLATFORM_INSTANCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PLATFORM_INSTANCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlatformInstanceAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SystemDefinition returns SystemDefinition
	 *
	 * Constraint:
	 *     (name=ID (nodes+=NodeInstance | subsystems+=SystemInstance)*)
	 * </pre>
	 */
	protected void sequence_SystemDefinition(ISerializationContext context, SystemDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SystemInstance returns SystemInstance
	 *     Feature returns SystemInstance
	 *
	 * Constraint:
	 *     (type=[SystemDefinition|ID] name=ID)
	 * </pre>
	 */
	protected void sequence_SystemInstance(ISerializationContext context, SystemInstance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SYSTEM_INSTANCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SYSTEM_INSTANCE__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FEATURE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemInstanceAccess().getTypeSystemDefinitionIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.SYSTEM_INSTANCE__TYPE, false));
		feeder.accept(grammarAccess.getSystemInstanceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NodeInstanceReference returns SystemReference
	 *     NodeInstanceReference.NodeInstanceReference_1_0 returns SystemReference
	 *     SystemReference returns SystemReference
	 *
	 * Constraint:
	 *     system=[SystemInstance|ID]
	 * </pre>
	 */
	protected void sequence_SystemReference(ISerializationContext context, SystemReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SYSTEM_REFERENCE__SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SYSTEM_REFERENCE__SYSTEM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemReferenceAccess().getSystemSystemInstanceIDTerminalRuleCall_0_1(), semanticObject.eGet(MyDslPackage.Literals.SYSTEM_REFERENCE__SYSTEM, false));
		feeder.finish();
	}
	
	
}
