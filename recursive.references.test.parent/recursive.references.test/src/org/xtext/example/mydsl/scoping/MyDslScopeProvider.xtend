/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.myDsl.SubSystemReference
import org.xtext.example.mydsl.myDsl.DeploymentStatement
import org.xtext.example.mydsl.myDsl.SystemReference

class MyDslScopeProvider extends AbstractMyDslScopeProvider {

	override getScope(EObject context, EReference reference) {
		switch(context) {
			SubSystemReference case reference == MyDslPackage::Literals::SYSTEM_REFERENCE__SYSTEM: {
				getScopeForSubSystemReference_SubSystem(context, reference)
			}
			DeploymentStatement case reference == MyDslPackage::Literals::DEPLOYMENT_STATEMENT__NODE: {
				getScopeForDeploymentStatement_node(context, reference)
			}
			default:
				super.getScope(context, reference)
		}
	}
	
	private def IScope getScopeForSubSystemReference_SubSystem(SubSystemReference subSysRef, EReference reference) {
		Scopes::scopeFor(subSysRef.parent.system.type.subsystems)
	}
	
	private def IScope getScopeForDeploymentStatement_node(DeploymentStatement deployment, EReference reference) {
		println(deployment.systemRef.getName)
		return Scopes::scopeFor(deployment.systemRef.system.type.nodes)
	}
	
	static def String getName(SystemReference ref) {
		switch (ref) {
			SubSystemReference: {
				ref.parent.name +"_"+ ref.system.name 
			}
			SystemReference: {
				ref.system.name
			}
			default: {
				""
			}
		}
	}
}